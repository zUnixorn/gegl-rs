// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use crate::{ffi};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "GeglColor")]
    pub struct Color(Object<ffi::GeglColor, ffi::GeglColorClass>);

    match fn {
        type_ => || ffi::gegl_color_get_type(),
    }
}

impl Color {
        pub const NONE: Option<&'static Color> = None;
    

    #[doc(alias = "gegl_color_new")]
    pub fn new(string: &str) -> Color {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::gegl_color_new(string.to_glib_none().0))
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`Color`] objects.
            ///
            /// This method returns an instance of [`ColorBuilder`](crate::builders::ColorBuilder) which can be used to create [`Color`] objects.
            pub fn builder() -> ColorBuilder {
                ColorBuilder::new()
            }
        
}

impl Default for Color {
                     fn default() -> Self {
                         glib::object::Object::new::<Self>()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`Color`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct ColorBuilder {
            builder: glib::object::ObjectBuilder<'static, Color>,
        }

        impl ColorBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            pub fn string(self, string: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("string", string.into()), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`Color`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Color {
assert_initialized_main_thread!();
    self.builder.build() }
}

pub trait ColorExt: IsA<Color> + 'static {
    #[doc(alias = "gegl_color_duplicate")]
#[must_use]
    fn duplicate(&self) -> Option<Color> {
        unsafe {
            from_glib_full(ffi::gegl_color_duplicate(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gegl_color_get_components")]
    #[doc(alias = "get_components")]
    fn components(&self, format: &mut glib::Value) -> Vec<f64> {
        unsafe {
            let mut components_length = std::mem::MaybeUninit::uninit();
            let ret = FromGlibContainer::from_glib_full_num(ffi::gegl_color_get_components(self.as_ref().to_glib_none().0, format.to_glib_none_mut().0, components_length.as_mut_ptr()), components_length.assume_init() as _);
            ret
        }
    }

    //#[doc(alias = "gegl_color_get_pixel")]
    //#[doc(alias = "get_pixel")]
    //fn pixel(&self, format: &babl::Object, pixel: /*Unimplemented*/Option<Basic: Pointer>) {
    //    unsafe { TODO: call ffi:gegl_color_get_pixel() }
    //}

    #[doc(alias = "gegl_color_get_rgba")]
    #[doc(alias = "get_rgba")]
    fn rgba(&self) -> (f64, f64, f64, f64) {
        unsafe {
            let mut red = std::mem::MaybeUninit::uninit();
            let mut green = std::mem::MaybeUninit::uninit();
            let mut blue = std::mem::MaybeUninit::uninit();
            let mut alpha = std::mem::MaybeUninit::uninit();
            ffi::gegl_color_get_rgba(self.as_ref().to_glib_none().0, red.as_mut_ptr(), green.as_mut_ptr(), blue.as_mut_ptr(), alpha.as_mut_ptr());
            (red.assume_init(), green.assume_init(), blue.assume_init(), alpha.assume_init())
        }
    }

    #[doc(alias = "gegl_color_set_components")]
    fn set_components(&self, format: &mut glib::Value, components: &[f64]) {
        let components_length = components.len() as _;
        unsafe {
            ffi::gegl_color_set_components(self.as_ref().to_glib_none().0, format.to_glib_none_mut().0, components.to_glib_none().0, components_length);
        }
    }

    //#[doc(alias = "gegl_color_set_pixel")]
    //fn set_pixel(&self, format: &babl::Object, pixel: /*Unimplemented*/Option<Basic: Pointer>) {
    //    unsafe { TODO: call ffi:gegl_color_set_pixel() }
    //}

    #[doc(alias = "gegl_color_set_rgba")]
    fn set_rgba(&self, red: f64, green: f64, blue: f64, alpha: f64) {
        unsafe {
            ffi::gegl_color_set_rgba(self.as_ref().to_glib_none().0, red, green, blue, alpha);
        }
    }

    fn string(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "string")
    }

    fn set_string(&self, string: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"string", string)
    }

    #[doc(alias = "string")]
    fn connect_string_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_string_trampoline<P: IsA<Color>, F: Fn(&P) + 'static>(this: *mut ffi::GeglColor, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Color::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::string".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_string_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Color>> ColorExt for O {}
