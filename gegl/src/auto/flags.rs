// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use crate::{ffi};
use glib::{bitflags::bitflags,prelude::*,translate::*};

bitflags! {
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]
    #[doc(alias = "GeglAccessMode")]
    pub struct AccessMode: u32 {
        #[doc(alias = "GEGL_ACCESS_READ")]
        const READ = ffi::GEGL_ACCESS_READ as _;
        #[doc(alias = "GEGL_ACCESS_WRITE")]
        const WRITE = ffi::GEGL_ACCESS_WRITE as _;
        #[doc(alias = "GEGL_ACCESS_READWRITE")]
        const READWRITE = ffi::GEGL_ACCESS_READWRITE as _;
    }
}

#[doc(hidden)]
impl IntoGlib for AccessMode {
    type GlibType = ffi::GeglAccessMode;

    #[inline]
    fn into_glib(self) -> ffi::GeglAccessMode {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GeglAccessMode> for AccessMode {
    #[inline]
    unsafe fn from_glib(value: ffi::GeglAccessMode) -> Self {
        skip_assert_initialized!();
        Self::from_bits_truncate(value)
    }
}

impl StaticType for AccessMode {
                #[inline]
    #[doc(alias = "gegl_access_mode_get_type")]
   fn static_type() -> glib::Type {
                    unsafe { from_glib(ffi::gegl_access_mode_get_type()) }
                }
            }

impl glib::HasParamSpec for AccessMode {
                type ParamSpec = glib::ParamSpecFlags;
                type SetValue = Self;
                type BuilderFn = fn(&str) -> glib::ParamSpecFlagsBuilder<Self>;
    
                fn param_spec_builder() -> Self::BuilderFn {
                    Self::ParamSpec::builder
                }
}

impl glib::value::ValueType for AccessMode {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for AccessMode {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl ToValue for AccessMode {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<AccessMode> for glib::Value {
    #[inline]
    fn from(v: AccessMode) -> Self {
        skip_assert_initialized!();
        ToValue::to_value(&v)
    }
}

bitflags! {
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]
    #[doc(alias = "GeglBlitFlags")]
    pub struct BlitFlags: u32 {
        #[doc(alias = "GEGL_BLIT_DEFAULT")]
        const DEFAULT = ffi::GEGL_BLIT_DEFAULT as _;
        #[doc(alias = "GEGL_BLIT_CACHE")]
        const CACHE = ffi::GEGL_BLIT_CACHE as _;
        #[doc(alias = "GEGL_BLIT_DIRTY")]
        const DIRTY = ffi::GEGL_BLIT_DIRTY as _;
    }
}

#[doc(hidden)]
impl IntoGlib for BlitFlags {
    type GlibType = ffi::GeglBlitFlags;

    #[inline]
    fn into_glib(self) -> ffi::GeglBlitFlags {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GeglBlitFlags> for BlitFlags {
    #[inline]
    unsafe fn from_glib(value: ffi::GeglBlitFlags) -> Self {
        skip_assert_initialized!();
        Self::from_bits_truncate(value)
    }
}

bitflags! {
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]
    #[doc(alias = "GeglPadType")]
    pub struct PadType: u32 {
        #[doc(alias = "GEGL_PARAM_PAD_OUTPUT")]
        const OUTPUT = ffi::GEGL_PARAM_PAD_OUTPUT as _;
        #[doc(alias = "GEGL_PARAM_PAD_INPUT")]
        const INPUT = ffi::GEGL_PARAM_PAD_INPUT as _;
    }
}

#[doc(hidden)]
impl IntoGlib for PadType {
    type GlibType = ffi::GeglPadType;

    #[inline]
    fn into_glib(self) -> ffi::GeglPadType {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GeglPadType> for PadType {
    #[inline]
    unsafe fn from_glib(value: ffi::GeglPadType) -> Self {
        skip_assert_initialized!();
        Self::from_bits_truncate(value)
    }
}

bitflags! {
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]
    #[doc(alias = "GeglSerializeFlag")]
    pub struct SerializeFlag: u32 {
        #[doc(alias = "GEGL_SERIALIZE_TRIM_DEFAULTS")]
        const TRIM_DEFAULTS = ffi::GEGL_SERIALIZE_TRIM_DEFAULTS as _;
        #[doc(alias = "GEGL_SERIALIZE_VERSION")]
        const VERSION = ffi::GEGL_SERIALIZE_VERSION as _;
        #[doc(alias = "GEGL_SERIALIZE_INDENT")]
        const INDENT = ffi::GEGL_SERIALIZE_INDENT as _;
        #[doc(alias = "GEGL_SERIALIZE_BAKE_ANIM")]
        const BAKE_ANIM = ffi::GEGL_SERIALIZE_BAKE_ANIM as _;
    }
}

#[doc(hidden)]
impl IntoGlib for SerializeFlag {
    type GlibType = ffi::GeglSerializeFlag;

    #[inline]
    fn into_glib(self) -> ffi::GeglSerializeFlag {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GeglSerializeFlag> for SerializeFlag {
    #[inline]
    unsafe fn from_glib(value: ffi::GeglSerializeFlag) -> Self {
        skip_assert_initialized!();
        Self::from_bits_truncate(value)
    }
}

