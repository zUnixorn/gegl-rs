// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use crate::{ffi};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "GeglAudioFragment")]
    pub struct AudioFragment(Object<ffi::GeglAudioFragment, ffi::GeglAudioFragmentClass>);

    match fn {
        type_ => || ffi::gegl_audio_fragment_get_type(),
    }
}

impl AudioFragment {
        pub const NONE: Option<&'static AudioFragment> = None;
    

    #[doc(alias = "gegl_audio_fragment_new")]
    pub fn new(sample_rate: i32, channels: i32, channel_layout: i32, max_samples: i32) -> AudioFragment {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::gegl_audio_fragment_new(sample_rate, channels, channel_layout, max_samples))
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`AudioFragment`] objects.
            ///
            /// This method returns an instance of [`AudioFragmentBuilder`](crate::builders::AudioFragmentBuilder) which can be used to create [`AudioFragment`] objects.
            pub fn builder() -> AudioFragmentBuilder {
                AudioFragmentBuilder::new()
            }
        
}

impl Default for AudioFragment {
                     fn default() -> Self {
                         glib::object::Object::new::<Self>()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`AudioFragment`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct AudioFragmentBuilder {
            builder: glib::object::ObjectBuilder<'static, AudioFragment>,
        }

        impl AudioFragmentBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            pub fn string(self, string: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("string", string.into()), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`AudioFragment`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> AudioFragment {
assert_initialized_main_thread!();
    self.builder.build() }
}

pub trait AudioFragmentExt: IsA<AudioFragment> + 'static {
    #[doc(alias = "gegl_audio_fragment_get_channel_layout")]
    #[doc(alias = "get_channel_layout")]
    fn channel_layout(&self) -> i32 {
        unsafe {
            ffi::gegl_audio_fragment_get_channel_layout(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "gegl_audio_fragment_get_channels")]
    #[doc(alias = "get_channels")]
    fn channels(&self) -> i32 {
        unsafe {
            ffi::gegl_audio_fragment_get_channels(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "gegl_audio_fragment_get_max_samples")]
    #[doc(alias = "get_max_samples")]
    fn max_samples(&self) -> i32 {
        unsafe {
            ffi::gegl_audio_fragment_get_max_samples(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "gegl_audio_fragment_get_pos")]
    #[doc(alias = "get_pos")]
    fn pos(&self) -> i32 {
        unsafe {
            ffi::gegl_audio_fragment_get_pos(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "gegl_audio_fragment_get_sample_count")]
    #[doc(alias = "get_sample_count")]
    fn sample_count(&self) -> i32 {
        unsafe {
            ffi::gegl_audio_fragment_get_sample_count(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "gegl_audio_fragment_get_sample_rate")]
    #[doc(alias = "get_sample_rate")]
    fn sample_rate(&self) -> i32 {
        unsafe {
            ffi::gegl_audio_fragment_get_sample_rate(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "gegl_audio_fragment_set_channel_layout")]
    fn set_channel_layout(&self, channel_layout: i32) {
        unsafe {
            ffi::gegl_audio_fragment_set_channel_layout(self.as_ref().to_glib_none().0, channel_layout);
        }
    }

    #[doc(alias = "gegl_audio_fragment_set_channels")]
    fn set_channels(&self, channels: i32) {
        unsafe {
            ffi::gegl_audio_fragment_set_channels(self.as_ref().to_glib_none().0, channels);
        }
    }

    #[doc(alias = "gegl_audio_fragment_set_max_samples")]
    fn set_max_samples(&self, max_samples: i32) {
        unsafe {
            ffi::gegl_audio_fragment_set_max_samples(self.as_ref().to_glib_none().0, max_samples);
        }
    }

    #[doc(alias = "gegl_audio_fragment_set_pos")]
    fn set_pos(&self, pos: i32) {
        unsafe {
            ffi::gegl_audio_fragment_set_pos(self.as_ref().to_glib_none().0, pos);
        }
    }

    #[doc(alias = "gegl_audio_fragment_set_sample_count")]
    fn set_sample_count(&self, sample_count: i32) {
        unsafe {
            ffi::gegl_audio_fragment_set_sample_count(self.as_ref().to_glib_none().0, sample_count);
        }
    }

    #[doc(alias = "gegl_audio_fragment_set_sample_rate")]
    fn set_sample_rate(&self, sample_rate: i32) {
        unsafe {
            ffi::gegl_audio_fragment_set_sample_rate(self.as_ref().to_glib_none().0, sample_rate);
        }
    }

    fn string(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "string")
    }

    fn set_string(&self, string: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"string", string)
    }

    #[doc(alias = "string")]
    fn connect_string_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_string_trampoline<P: IsA<AudioFragment>, F: Fn(&P) + 'static>(this: *mut ffi::GeglAudioFragment, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(AudioFragment::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::string".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_string_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<AudioFragment>> AudioFragmentExt for O {}
